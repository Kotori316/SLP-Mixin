import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
plugins {
    id 'scala'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

version = '1.0'
group = 'com.kotori316' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ScalableCatsForce-Mixin'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileScala {
    sourceCompatibility = targetCompatibility = '1.8'
}

println("Java: ${System.getProperty('java.version')} JVM: ${System.getProperty('java.vm.version')}(${System.getProperty('java.vendor')}) Arch: ${System.getProperty('os.arch')}")

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "slp-mixin" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "slp-mixin" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            forceExit false
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'slp-mixin', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "slp-mixin" {
                    source sourceSets.main
                }
            }
        }
    }
}

private boolean hasGitHubToken() {
    return project.hasProperty("githubToken") || System.getenv("REPO_TOKEN") != null
}

repositories {
    maven {
        name = "Mixin"
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        name = "AzureRepository-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            includeModule("com.kotori316", "ScalableCatsForce".toLowerCase())
        }
    }
}

mixin {
    add sourceSets.main, "mixins.slp.refmap.json"
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.34'

    String scala_version = "2.13.5"
    String cats_version = "2.6.0"
    String scala_major = scala_version.substring(0, scala_version.lastIndexOf("."))
    implementation group: "org.scala-lang", name: "scala-library", version: scala_version
    implementation group: 'org.typelevel', name: "cats-core_${scala_major}", version: cats_version

    implementation(group: 'com.kotori316', name: 'ScalableCatsForce'.toLowerCase(Locale.ROOT), version: '2.13.5-build-2', classifier: 'dev')
    // Mixin
    annotationProcessor("org.spongepowered:mixin:0.8.2:processor")

    // Test Dependencies.
    implementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0')
    runtimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0')
    implementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.0')
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "slp-mixin",
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : String.valueOf(project.version),
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
                "MixinConfigs"            : "slp-plugin.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs un-obf-ed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')
task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set("deobf")
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

task signJar(type: net.minecraftforge.gradle.common.task.SignJar) {
    alias = project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : ""
    keyStore = project.hasProperty('keyStore') ? project.getProperty("keyStore") : ""
    storePass = project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : ""
    keyPass = project.hasProperty("keyStoreKeyPass") ? project.getProperty('keyStoreKeyPass') : ""

    inputFile = jar.archiveFile.get()
    outputFile = jar.archiveFile.get()

    onlyIf {
        project.hasProperty('keyStoreAlias') &&
                project.hasProperty('keyStore') &&
                project.hasProperty('keyStorePass')
    }
}

if (project.hasProperty('keyStoreAlias')) {
    // Runs this task automatically when build is ran.
    assemble.dependsOn(signJar)
//    assemble.dependsOn(signJar2)
    if (System.getenv("CI") == null) {
        // Exclude all test codes
        sourceSets {
            main {
                scala {
                    srcDir 'src/main/scala'
                    exclude "/com/kotori316/scala_lib/test/**"
                    exclude "/com/kotori316/scala_lib/SLPTest.java"
                }
            }
        }
        println("Exclude test sources.")
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName.toLowerCase()
            artifact jar
            artifact srcJar
        }
    }
    repositories {
        /*maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Kotori316/SLP")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
            }
        }*/
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
}