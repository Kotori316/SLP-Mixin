buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
plugins {
    id 'scala'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

version = '1.0'
group = 'com.kotori316' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'ScalableCatsForce-Mixin'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileScala {
    sourceCompatibility = targetCompatibility = '1.8'
}

println("Java: ${System.getProperty('java.version')} JVM: ${System.getProperty('java.vm.version')}(${System.getProperty('java.vendor')}) Arch: ${System.getProperty('os.arch')}")

minecraft {
    mappings channel: 'snapshot', version: '20201028-1.16.3'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "slp-mixin" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                "slp-mixin" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            forceExit false
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'slp-mixin', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                "slp-mixin" {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

private boolean hasGitHubToken() {
    return project.hasProperty("githubToken") || System.getenv("REPO_TOKEN") != null
}

repositories {
    maven {
        name = "Mixin"
        url = 'https://repo.spongepowered.org/maven'
    }
    if (hasGitHubToken()) {
        mavenLocal()
        maven {
            name = "GitHubPackages-SLP"
            url = uri("https://maven.pkg.github.com/Kotori316/SLP")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
            }
            content {
                includeModule("com.kotori316", "ScalableCatsForce".toLowerCase())
            }
        }
        // mavenLocal()
    } else {
        maven {
            // Curse Forge
            name 'Curse Forge'
            url 'https://minecraft.curseforge.com/api/maven/'
            content {
                includeModule("scalable-cats-force", "ScalableCatsForce-2.13.3-build")
            }
        }
    }
}

mixin {
    add sourceSets.main, "mixins.slp.refmap.json"
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.4-35.1.0'

    String scala_version = "2.13.3"
    String cats_version = "2.2.0"
    String scala_major = scala_version.substring(0, scala_version.lastIndexOf("."))
    implementation group: "org.scala-lang", name: "scala-library", version: scala_version
    implementation group: 'org.typelevel', name: "cats-core_${scala_major}", version: cats_version

    if (hasGitHubToken()) {
        implementation("com.kotori316:ScalableCatsForce:2.13.3-build-7:dev".toLowerCase())
    } else {
        implementation("scalable-cats-force:ScalableCatsForce-2.13.3-build:6:dev")
    }
    // Mixin
    annotationProcessor("org.spongepowered:mixin:0.8.2:processor")

    // Test Dependencies.
    implementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0')
    runtimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0')
    implementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.0')
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "slp-mixin",
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : String.valueOf(project.version),
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "slp.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}